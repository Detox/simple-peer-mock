// Generated by LiveScript 1.5.0
/**
 * @package simple-peer-mock
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var simplePeerInstances, asyncEventer, module, original_require;
  simplePeerInstances = [];
  asyncEventer = require('async-eventer');
  function simplePeerMock(options){
    var this$ = this;
    if (!(this instanceof simplePeerMock)) {
      return new simplePeerMock(options);
    }
    asyncEventer.call(this);
    this._initiator = options.initiator;
    this._own_id = simplePeerInstances.length;
    simplePeerInstances.push(this);
    if (options.initiator) {
      setTimeout(function(){
        this$.fire('signal', {
          type: 'offer',
          sdp: String(this$._own_id)
        });
      });
    }
  }
  simplePeerMock.prototype = {
    signal: function(signal){
      if (this._initiator && signal['type'] !== 'answer') {
        this.destroy();
        return;
      }
      if (!this._initiator && signal['type'] !== 'offer') {
        this.destroy();
        return;
      }
      this._target_id = +signal['sdp'];
      if ('_target_id' in simplePeerInstances[this._target_id]) {
        this.fire('connect');
        simplePeerInstances[this._target_id].fire('connect');
      } else if (!this._initiator) {
        this.fire('signal', {
          type: 'answer',
          sdp: String(this._own_id)
        });
      }
    },
    send: function(data){
      simplePeerInstances[this._target_id].fire('data', data);
    },
    destroy: function(){
      if (this._destroyed) {
        return;
      }
      this._destroyed = true;
      return this.fire('close');
    }
  };
  simplePeerMock.prototype = Object.assign(Object.create(asyncEventer.prototype), simplePeerMock.prototype);
  Object.defineProperty(simplePeerMock.prototype, 'constructor', {
    value: simplePeerMock
  });
  module.exports = {
    simplePeerMock: simplePeerMock,
    register: register
  };
  module = require('module');
  original_require = module.prototype.require;
  module.prototype.require = function(module_name){
    if (module_name === '@detox/simple-peer') {
      return simplePeerMock;
    } else {
      return original_require.apply(this, arguments);
    }
  };
}).call(this);
